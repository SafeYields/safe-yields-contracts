{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ISafeVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\n/// @title  ISafeVault\n/// @author crypt0grapher\n/// @notice Safe Yield Vault depositing to the third-party yield farms\ninterface ISafeVault {\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n\n    // @notice deposit stable coin  to the vault from the sender, anyone can deposit funds to the vault\n    // @param _amount amount of stable coin  to deposit\n    function deposit(uint256 _amount) external;\n\n    // @notice Withdraw stable coin from the vault, supported only for the SafeToken currently on selling SAFE Token\n    // @dev that's called remove specifically to avoid confusion with withdraw since the vault is not a pool and can't be withdrawn from except the safe token\n    // @param _user user to send tokens to, withdrawn from the sender\n    // @param _amount amount of stable coin  to withdraw\n    function remove(address _user, uint256 _amount) external;\n\n    // @notice totalSupply of the vault, total amount of the stablecoin in the vault, including deposits and other tokens transferred to the vault\n    // @return total supply of the vault\n    function totalSupply() external view returns (uint256);\n\n    // @notice total deposited of the vault from non-Safe Token \"external\" users\n    // @return total stable coin deposited to the vault\n    function totalDeposited() external view returns (uint256);\n\n}\n"
    },
    "contracts/Owned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\n/// @title  Safe NFT\n/// @author crypt0grapher\n/// @notice Safe Yields NFT token based on ERC1155 standard, id [0..3] represents one of the 4 tiers\n\ncontract Owned {\n    /// @dev this is getting the owner from the proxy contract, the proxy contract is ERC-173 compliant and support transferOwnership\n    /// @dev service function used by children contracts which are at least SafeVault.sol and SafeToken.sol\n    function _getOwner() internal view returns (address adminAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            adminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n}\n"
    },
    "contracts/SafeVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\nimport \"./interfaces/ISafeVault.sol\";\nimport \"./Owned.sol\";\n\n/// @title  Safe Vault\n/// @author crypt0grapher\n/// @notice This contract is responsible for the stablecoin pool: mainly deposit/withdrawal and farms management\ncontract SafeVault is ISafeVault, Proxied, Owned, ReentrancyGuard {\n    IERC20 public usd;\n    uint256 public totalDeposited;\n    mapping(address => uint256) public deposited;\n    /// @notice only Safe Token can withdraw tokens from the vault, when users sell SAFE\n    address public safeToken;\n\n    modifier onlyOwner() {\n        require(msg.sender == _getOwner(), \"SafeVault: only owner\");\n        _;\n    }\n\n    function initialize(address _usd) public proxied {\n        usd = IERC20(_usd);\n    }\n\n    constructor(address _usd) {\n        initialize(_usd);\n    }\n\n    function setSafeToken(address _safeToken) external onlyOwner {\n        safeToken = _safeToken;\n    }\n\n    /// @dev total supply, used to determine the price of the SAFE token, deposited on SAFE purchase + transferred to the vault\n    function totalSupply() external view returns (uint256) {\n        return usd.balanceOf(address(this));\n    }\n\n    /// @dev Deposit stablecoin to the vault, the total supply of the vault includes not only tokens deposited by users, but also tokens transferred  to the vault\n    function deposit(uint256 _amount) external nonReentrant {\n        require(_amount > 0, \"SafeVault: amount to deposit must be greater than 0\");\n        if (msg.sender != safeToken) {\n            // used to count positions of external deposits, although Safe Token is in possession of all funds\n            // to be able to withdraw from the vault with respect to the price of the SAFE token\n            deposited[msg.sender] += _amount;\n            totalDeposited += _amount;\n        }\n        usd.transferFrom(msg.sender, address(this), _amount);\n        emit Deposit(msg.sender, _amount);\n    }\n\n    function remove(address _receiver, uint256 _amount) external nonReentrant {\n        /// @dev we're allowing withdrawals only to Safe Token, not any user, not even admin is allowed to withdraw from the vault.\n        require(msg.sender == safeToken, \"SafeVault: only safe token is allowed to remove liquidity\");\n        require(_amount > 0, \"SafeVault: amount to remove must be greater than 0\");\n        require(usd.balanceOf(address(this)) >= _amount, \"SafeVault: vault balance is less than amount to withdraw\");\n        usd.transfer(_receiver, _amount);\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /// @dev this one is used to recover tokens sent to the vault by mistake, including both SAFE and USD ones\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n        IERC20(tokenAddress).transfer(_getOwner(), tokenAmount);\n    }\n\n    function recoverETH() external onlyOwner {\n        payable(_getOwner()).transfer(address(this).balance);\n    }\n\n}\n"
    },
    "hardhat-deploy/solc_0.8/proxy/Proxied.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Proxied {\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "berlin",
    "metadata": {
      "useLiteralContent": true
    }
  }
}