{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/ISafeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./ISafeVault.sol\";\n\n/// @title  ISafeToken\n/// @author crypt0grapher\n/// @notice This contract is used as a token\ninterface ISafeToken is IERC20, IERC20Metadata {\n\n    /**\n    *   @notice buy SAFE tokens for given amount of USD, taxes deducted from the provided amount, SAFE is minted\n    *   @param _usdToSpend number of tokens to buy, the respective amount of USD will be deducted from the user, Safe Yield token will be minted\n    */\n    function buySafeForExactAmountOfUSD(uint256 _usdToSpend) external returns (uint256);\n\n    /**\n    *   @notice calculate and deduct amount of USD needed to buy given amount of SAFE tokens, SAFE is minted\n    *   @param _safeTokensToBuy number of tokens to buy, the respective amount of stable coin  will be deducted from the user, Safe Yield token will be minted\n    */\n    function buyExactAmountOfSafe(uint256 _safeTokensToBuy) external;\n\n    /**\n    *   @notice sell given amount of SAFE tokens for USD, taxes deducted from the user, SAFE is burned\n    *   @param _safeTokensToSell number of tokens to sell, the respective amount of stable coin  will be returned from the user, Safe Yield token will be burned\n    */\n    function sellExactAmountOfSafe(uint256 _safeTokensToSell) external returns (uint256);\n\n    /**\n    *   @notice calculate the amount of SAFE needed to swap to get the exact USD amount, SAFE is burned USD redeemed from the vault\n    *   @param _usdToGet number of tokens to buy, the respective amount of stable coin  will be deducted from the user, Safe Yield token will be minted\n    */\n    function sellSafeForExactAmountOfUSD(uint256 _usdToGet) external;\n\n    /**\n    *   @notice admin function, currently used only to deposit 1 SAFE token to the Safe Vault to set the start price\n    */\n    function mint(address usr, uint256 wad) external;\n\n    /**\n    *   @notice admin function\n    */\n    function burn(address usr, uint256 wad) external;\n\n    /**\n    *   @notice list of wallets participating in tax distribution on top of the vault\n    */\n    function getWallets() external view returns (address[2] memory);\n\n    /**\n    *   @notice stable coin token contract used in the protocol\n    */\n    function usd() external view returns (IERC20);\n\n    /**\n*   @notice attached safe vault contract\n    */\n    function safeVault() external view returns (ISafeVault);\n\n    /**\n    *   @notice price of 1 Safe Yield token in StableCoin\n    */\n    function price() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISafeVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.17;\n\n/// @title  ISafeVault\n/// @author crypt0grapher\n/// @notice Safe Yield Vault depositing to the third-party yield farms\ninterface ISafeVault {\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n\n    // @notice deposit stable coin  to the vault from the sender, anyone can deposit funds to the vault\n    // @param _amount amount of stable coin  to deposit\n    function deposit(uint256 _amount) external;\n\n    // @notice Withdraw stable coin from the vault, supported only for the SafeToken currently on selling SAFE Token\n    // @dev that's called remove specifically to avoid confusion with withdraw since the vault is not a pool and can't be withdrawn from except the safe token\n    // @param _user user to send tokens to, withdrawn from the sender\n    // @param _amount amount of stable coin  to withdraw\n    function remove(address _user, uint256 _amount) external;\n\n    // @notice totalSupply of the vault, total amount of the stablecoin in the vault, including deposits and other tokens transferred to the vault\n    // @return total supply of the vault\n    function totalSupply() external view returns (uint256);\n\n    // @notice total deposited of the vault from non-Safe Token \"external\" users\n    // @return total stable coin deposited to the vault\n    function deposited() external view returns (uint256);\n\n}\n"
    },
    "contracts/SafeRouter.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"hardhat-deploy/solc_0.8/proxy/Proxied.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/ISafeToken.sol\";\n\ncontract SafeRouter is Proxied, ReentrancyGuard {\n    address public kyberSwapRouterContract;\n    ISafeToken public safeTokenContract;\n    bytes4 public constant swap = 0xe21fd0e9;\n    bytes4 public constant swapSimpleMode = 0x8af033fb;\n    IERC20 public usd;\n\n    event PayBulk(uint256 amountUSD, uint256 amountSAFE, uint256 recipeintsCount);\n\n\n    function initialize(address _kyberSwapRouter, address _usd, address _safeToken) public proxied {\n        kyberSwapRouterContract = _kyberSwapRouter;\n        usd = IERC20(_usd);\n        safeTokenContract = ISafeToken(_safeToken);\n        usd.approve(address(safeTokenContract), type(uint256).max);\n        safeTokenContract.approve(address(safeTokenContract), type(uint256).max);\n    }\n\n    constructor(address _kyberSwapRouter, address _usd, address _safeToken) {\n        initialize(_kyberSwapRouter, _usd, _safeToken);\n    }\n\n    function approveTokens(\n        address[] calldata tokens,\n        address spender,\n        uint256 amount\n    ) external onlyProxyAdmin {\n        uint256 tokenCount = tokens.length;\n        for (uint256 i = 0; i < tokenCount; i++) {\n            IERC20 token = IERC20(tokens[i]);\n            bool success = token.approve(spender, amount);\n            require(success, \"Token approval failed\");\n        }\n    }\n\n    function updateAllowedContract(address _allowedContract) external {\n        require(msg.sender == tx.origin, \"Only EOA can update the allowed contract\");\n        kyberSwapRouterContract = _allowedContract;\n    }\n\n\n    function proxyAndBuy(bytes calldata data) external nonReentrant {\n        bytes4 functionSignature = extractFunctionSignature(data);\n        require(functionSignature == swap || functionSignature == swapSimpleMode, \"Not allowed function\");\n        (bool success, bytes memory returnData) = kyberSwapRouterContract.call(data);\n        if (!success) {\n            assembly {\n                let returnDataSize := mload(returnData)\n                revert(add(32, returnData), returnDataSize)\n            }\n        } else {\n            (uint256 returnAmount, uint256 gasUsed) = abi.decode(returnData, (uint256, uint256));\n            uint safeTokensToBuy = safeTokenContract.buySafeForExactAmountOfUSD(returnAmount);\n            safeTokenContract.transfer(msg.sender, safeTokensToBuy);\n        }\n    }\n\n    function sellAndProxy(bytes calldata data, uint256 safeAmount) external nonReentrant {\n        bytes4 functionSignature = extractFunctionSignature(data);\n        require(functionSignature == swap || functionSignature == swapSimpleMode, \"Not allowed function\");\n        uint currentUSD = usd.balanceOf(address(this));\n        uint usdToReturn = safeTokenContract.sellExactAmountOfSafe(safeAmount);\n        (bool success, bytes memory returnData) = kyberSwapRouterContract.delegatecall(data);\n        require(success, \"KyberSwap execution failed\");\n        (uint256 returnAmount, uint256 gasUsed) = abi.decode(returnData, (uint256, uint256));\n        uint remainingUsd = usd.balanceOf(address(this));\n        if (remainingUsd > currentUSD) {\n            usd.transfer(msg.sender, remainingUsd - currentUSD);\n        }\n    }\n\n    function extractFunctionSignature(bytes memory data) internal pure returns (bytes4) {\n        require(data.length >= 4, \"Invalid data length\");\n        bytes4 signature;\n        assembly {\n            signature := mload(add(data, 32))\n        }\n        return signature;\n    }\n\n\n    function payBulk(address[] calldata _receivers, uint256[] calldata _usdAmounts) external nonReentrant {\n        require(_receivers.length > 0 && _usdAmounts.length == _receivers.length, \"SafeToken: receivers must be non-empty and same length as amounts\");\n        uint256 usdAmount = 0;\n        for (uint256 i = 0; i < _usdAmounts.length; i++) {\n            require(_usdAmounts[i] > 0, \"SafeToken: amount must be greater than 0\");\n            usdAmount+= _usdAmounts[i];\n        }\n        usd.transferFrom(msg.sender, address(this), usdAmount);\n        uint256 safeTokens = safeTokenContract.buySafeForExactAmountOfUSD(usdAmount);\n        uint256[] memory safeAmounts = new uint256[](_receivers.length);\n        for (uint256 i = 0; i < _receivers.length; i++) {\n            safeAmounts[i] = safeTokens * _usdAmounts[i] / usdAmount;\n            safeTokenContract.transfer(_receivers[i], safeAmounts[i]);\n        }\n        emit PayBulk(usdAmount, safeTokens, _receivers.length);\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/proxy/Proxied.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Proxied {\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\n    /// It also allows these functions to be called inside a contructor\n    /// even if the contract is meant to be used without proxy\n    modifier proxied() {\n        address proxyAdminAddress = _proxyAdmin();\n        // With hardhat-deploy proxies\n        // the proxyAdminAddress is zero only for the implementation contract\n        // if the implementation contract want to be used as a standalone/immutable contract\n        // it simply has to execute the `proxied` function\n        // This ensure the proxyAdminAddress is never zero post deployment\n        // And allow you to keep the same code for both proxied contract and immutable contract\n        if (proxyAdminAddress == address(0)) {\n            // ensure can not be called twice when used outside of proxy : no admin\n            // solhint-disable-next-line security/no-inline-assembly\n            assembly {\n                sstore(\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n                )\n            }\n        } else {\n            require(msg.sender == proxyAdminAddress);\n        }\n        _;\n    }\n\n    modifier onlyProxyAdmin() {\n        require(msg.sender == _proxyAdmin(), \"NOT_AUTHORIZED\");\n        _;\n    }\n\n    function _proxyAdmin() internal view returns (address ownerAddress) {\n        // solhint-disable-next-line security/no-inline-assembly\n        assembly {\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 250
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "evmVersion": "berlin",
    "metadata": {
      "useLiteralContent": true
    }
  }
}