{
  "address": "0x614b50fb268eFE9cA758628fd6c7021B77E66aC6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kyberSwapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_kyberSwapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kyberSwapRouterContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "proxyAndBuy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeTokenContract",
      "outputs": [
        {
          "internalType": "contract ISafeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "safeAmount",
          "type": "uint256"
        }
      ],
      "name": "sellAndProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swap",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapSimpleMode",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedContract",
          "type": "address"
        }
      ],
      "name": "updateAllowedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usd",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f61ed476fd4900abfeec99a60efb393e79d1848629fde9b79b63b91c16c0ae3",
  "receipt": {
    "to": null,
    "from": "0xBD03D84be529D5b8862FD18ABFbA4d3b753d488A",
    "contractAddress": "0x614b50fb268eFE9cA758628fd6c7021B77E66aC6",
    "transactionIndex": 1,
    "gasUsed": "20221369",
    "logsBloom": "0x
    "blockHash": "0xdaf218be82caccb2e639e9254c42d2a3a678a2ee2400b9c2655628a223a14eac",
    "transactionHash": "0x4f61ed476fd4900abfeec99a60efb393e79d1848629fde9b79b63b91c16c0ae3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 88577201,
        "transactionHash": "0x4f61ed476fd4900abfeec99a60efb393e79d1848629fde9b79b63b91c16c0ae3",
        "address": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000614b50fb268efe9ca758628fd6c7021b77e66ac6",
          "0x000000000000000000000000519efb2befbd3f00d335dc9df42bf721d591604f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xdaf218be82caccb2e639e9254c42d2a3a678a2ee2400b9c2655628a223a14eac"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 88577201,
        "transactionHash": "0x4f61ed476fd4900abfeec99a60efb393e79d1848629fde9b79b63b91c16c0ae3",
        "address": "0x519EfB2bEFBd3f00D335dc9DF42BF721D591604f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000614b50fb268efe9ca758628fd6c7021b77e66ac6",
          "0x000000000000000000000000519efb2befbd3f00d335dc9df42bf721d591604f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xdaf218be82caccb2e639e9254c42d2a3a678a2ee2400b9c2655628a223a14eac"
      }
    ],
    "blockNumber": 88577201,
    "cumulativeGasUsed": "20221369",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    "0x519EfB2bEFBd3f00D335dc9DF42BF721D591604f"
  ],
  "numDeployments": 1,
  "solcInputHash": "0f6fbf4c461440d191a158c05c7bb7fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kyberSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kyberSwapRouterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"proxyAndBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeTokenContract\",\"outputs\":[{\"internalType\":\"contract ISafeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"safeAmount\",\"type\":\"uint256\"}],\"name\":\"sellAndProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSimpleMode\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedContract\",\"type\":\"address\"}],\"name\":\"updateAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeRouter.sol\":\"SafeRouter\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":250},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/SafeRouter.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ISafeToken.sol\\\";\\n\\ncontract SafeRouter is Proxied, ReentrancyGuard {\\n    address public kyberSwapRouterContract;\\n    ISafeToken public safeTokenContract;\\n    bytes4 public constant swap = 0xe21fd0e9;\\n    bytes4 public constant swapSimpleMode = 0x8af033fb;\\n    IERC20 public usd;\\n\\n\\n    function initialize(address _kyberSwapRouter, address _usd, address _safeToken) public proxied {\\n        kyberSwapRouterContract = _kyberSwapRouter;\\n        usd = IERC20(_usd);\\n        safeTokenContract = ISafeToken(_safeToken);\\n        usd.approve(address(safeTokenContract), type(uint256).max);\\n        safeTokenContract.approve(address(safeTokenContract), type(uint256).max);\\n\\n    }\\n\\n    constructor(address _kyberSwapRouter, address _usd, address _safeToken) {\\n        initialize(_kyberSwapRouter, _usd, _safeToken);\\n    }\\n\\n    function approveTokens(\\n        address[] calldata tokens,\\n        address spender,\\n        uint256 amount\\n    ) external onlyProxyAdmin {\\n        uint256 tokenCount = tokens.length;\\n        for (uint256 i = 0; i < tokenCount; i++) {\\n            IERC20 token = IERC20(tokens[i]);\\n            bool success = token.approve(spender, amount);\\n            require(success, \\\"Token approval failed\\\");\\n        }\\n    }\\n\\n    function updateAllowedContract(address _allowedContract) external {\\n        require(msg.sender == tx.origin, \\\"Only EOA can update the allowed contract\\\");\\n        kyberSwapRouterContract = _allowedContract;\\n    }\\n\\n\\n    function proxyAndBuy(bytes calldata data) external nonReentrant {\\n        bytes4 functionSignature = extractFunctionSignature(data);\\n        require(functionSignature == swap || functionSignature == swapSimpleMode, \\\"Not allowed function\\\");\\n        (bool success, bytes memory returnData) = kyberSwapRouterContract.call(data);\\n        if (!success) {\\n            assembly {\\n                let returnDataSize := mload(returnData)\\n                revert(add(32, returnData), returnDataSize)\\n            }\\n        } else {\\n            (uint256 returnAmount, uint256 gasUsed) = abi.decode(returnData, (uint256, uint256));\\n            uint safeTokensToBuy = safeTokenContract.buySafeForExactAmountOfUSD(returnAmount);\\n            safeTokenContract.transfer(msg.sender, safeTokensToBuy);\\n        }\\n    }\\n\\n    function sellAndProxy(bytes calldata data, uint256 safeAmount) external nonReentrant {\\n        bytes4 functionSignature = extractFunctionSignature(data);\\n        require(functionSignature == swap || functionSignature == swapSimpleMode, \\\"Not allowed function\\\");\\n        uint currentUSD = usd.balanceOf(address(this));\\n        uint usdToReturn = safeTokenContract.sellExactAmountOfSafe(safeAmount);\\n        (bool success, bytes memory returnData) = kyberSwapRouterContract.delegatecall(data);\\n        require(success, \\\"KyberSwap execution failed\\\");\\n        (uint256 returnAmount, uint256 gasUsed) = abi.decode(returnData, (uint256, uint256));\\n        uint remainingUsd = usd.balanceOf(address(this));\\n        if (remainingUsd > currentUSD) {\\n            usd.transfer(msg.sender, remainingUsd - currentUSD);\\n        }\\n    }\\n\\n    function extractFunctionSignature(bytes memory data) internal pure returns (bytes4) {\\n        require(data.length >= 4, \\\"Invalid data length\\\");\\n        bytes4 signature;\\n        assembly {\\n            signature := mload(add(data, 32))\\n        }\\n        return signature;\\n    }\\n}\\n\",\"keccak256\":\"0xf00eb7cb7e0a638fad5ebf9e071540a55236a62758495d0baf99de4d76a189ac\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./ISafeVault.sol\\\";\\n\\n/// @title  ISafeToken\\n/// @author crypt0grapher\\n/// @notice This contract is used as a token\\ninterface ISafeToken is IERC20, IERC20Metadata {\\n\\n    /**\\n    *   @notice buy SAFE tokens for given amount of USD, taxes deducted from the provided amount, SAFE is minted\\n    *   @param _usdToSpend number of tokens to buy, the respective amount of USD will be deducted from the user, Safe Yield token will be minted\\n    */\\n    function buySafeForExactAmountOfUSD(uint256 _usdToSpend) external returns (uint256);\\n\\n    /**\\n    *   @notice calculate and deduct amount of USD needed to buy given amount of SAFE tokens, SAFE is minted\\n    *   @param _safeTokensToBuy number of tokens to buy, the respective amount of stable coin  will be deducted from the user, Safe Yield token will be minted\\n    */\\n    function buyExactAmountOfSafe(uint256 _safeTokensToBuy) external;\\n\\n    /**\\n    *   @notice sell given amount of SAFE tokens for USD, taxes deducted from the user, SAFE is burned\\n    *   @param _safeTokensToSell number of tokens to sell, the respective amount of stable coin  will be returned from the user, Safe Yield token will be burned\\n    */\\n    function sellExactAmountOfSafe(uint256 _safeTokensToSell) external returns (uint256);\\n\\n    /**\\n    *   @notice calculate the amount of SAFE needed to swap to get the exact USD amount, SAFE is burned USD redeemed from the vault\\n    *   @param _usdToGet number of tokens to buy, the respective amount of stable coin  will be deducted from the user, Safe Yield token will be minted\\n    */\\n    function sellSafeForExactAmountOfUSD(uint256 _usdToGet) external;\\n\\n    /**\\n    *   @notice admin function, currently used only to deposit 1 SAFE token to the Safe Vault to set the start price\\n    */\\n    function mint(address usr, uint256 wad) external;\\n\\n    /**\\n    *   @notice admin function\\n    */\\n    function burn(address usr, uint256 wad) external;\\n\\n    /**\\n    *   @notice list of wallets participating in tax distribution on top of the vault\\n    */\\n    function getWallets() external view returns (address[2] memory);\\n\\n    /**\\n    *   @notice stable coin token contract used in the protocol\\n    */\\n    function usd() external view returns (IERC20);\\n\\n    /**\\n*   @notice attached safe vault contract\\n    */\\n    function safeVault() external view returns (ISafeVault);\\n\\n    /**\\n    *   @notice price of 1 Safe Yield token in StableCoin\\n    */\\n    function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa65253e5d3a5463689699deed05d37c6b935e6e42ba5e3d562853b460d40aa64\",\"license\":\"MIT\"},\"contracts/interfaces/ISafeVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17;\\n\\n/// @title  ISafeVault\\n/// @author crypt0grapher\\n/// @notice Safe Yield Vault depositing to the third-party yield farms\\ninterface ISafeVault {\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    // @notice deposit stable coin  to the vault from the sender, anyone can deposit funds to the vault\\n    // @param _amount amount of stable coin  to deposit\\n    function deposit(uint256 _amount) external;\\n\\n    // @notice Withdraw stable coin from the vault, supported only for the SafeToken currently on selling SAFE Token\\n    // @dev that's called remove specifically to avoid confusion with withdraw since the vault is not a pool and can't be withdrawn from except the safe token\\n    // @param _user user to send tokens to, withdrawn from the sender\\n    // @param _amount amount of stable coin  to withdraw\\n    function remove(address _user, uint256 _amount) external;\\n\\n    // @notice totalSupply of the vault, total amount of the stablecoin in the vault, including deposits and other tokens transferred to the vault\\n    // @return total supply of the vault\\n    function totalSupply() external view returns (uint256);\\n\\n    // @notice total deposited of the vault from non-Safe Token \\\"external\\\" users\\n    // @return total stable coin deposited to the vault\\n    function deposited() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x5cdc583c7200a77c9c0dcd50a661403df70917b1164c5d814dc72a63f49ff5a3\",\"license\":\"MIT\"},\"hardhat-deploy/solc_0.8/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaceeafeeaf0d200ca3942d8bf14c1c4f787a77f79cc87c08bb668e65acdee29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806391acb8481161006657806391acb84814610118578063c0c53b8b14610143578063c72adad814610156578063d63a6ccd14610169578063e75875fc1461017c57600080fd5b80631a6dc57b146100a3578063255345e4146100cf5780633aa93254146100e4578063584710d9146100f75780638119c0651461010a575b600080fd5b6100b1638af033fb60e01b81565b6040516001600160e01b031990911681526020015b60405180910390f35b6100e26100dd366004610c14565b61018f565b005b6100e26100f2366004610c72565b6103e4565b6100e2610105366004610cfe565b610569565b6100b163e21fd0e960e01b81565b60015461012b906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b6100e2610151366004610d4a565b6108f9565b6100e2610164366004610d8d565b610a9e565b60035461012b906001600160a01b031681565b60025461012b906001600160a01b031681565b610197610b20565b60006101d883838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b7992505050565b90506001600160e01b0319811663e21fd0e960e01b148061020957506001600160e01b03198116638af033fb60e01b145b6102515760405162461bcd60e51b81526020600482015260146024820152732737ba1030b63637bbb2b210333ab731ba34b7b760611b60448201526064015b60405180910390fd5b60015460405160009182916001600160a01b03909116906102759087908790610daf565b6000604051808303816000865af19150503d80600081146102b2576040519150601f19603f3d011682016040523d82523d6000602084013e6102b7565b606091505b5091509150816102ca5780518082602001fd5b600080828060200190518101906102e19190610dbf565b60025460405163f7e0ba5f60e01b8152600481018490529294509092506000916001600160a01b039091169063f7e0ba5f906024016020604051808303816000875af1158015610335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103599190610de3565b60025460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610dfc565b505050505050506103e06001600055565b5050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b0316336001600160a01b0316146104575760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610248565b8260005b8181101561056157600086868381811061047757610477610e1e565b905060200201602081019061048c9190610d8d565b60405163095ea7b360e01b81526001600160a01b0387811660048301526024820187905291925060009183169063095ea7b3906044016020604051808303816000875af11580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190610dfc565b90508061054c5760405162461bcd60e51b8152602060048201526015602482015274151bdad95b88185c1c1c9bdd985b0819985a5b1959605a1b6044820152606401610248565b5050808061055990610e4a565b91505061045b565b505050505050565b610571610b20565b60006105b284848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b7992505050565b90506001600160e01b0319811663e21fd0e960e01b14806105e357506001600160e01b03198116638af033fb60e01b145b6106265760405162461bcd60e51b81526020600482015260146024820152732737ba1030b63637bbb2b210333ab731ba34b7b760611b6044820152606401610248565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561066f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106939190610de3565b60025460405163174d386b60e31b8152600481018690529192506000916001600160a01b039091169063ba69c358906024016020604051808303816000875af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190610de3565b60015460405191925060009182916001600160a01b03169061072d908a908a90610daf565b600060405180830381855af49150503d8060008114610768576040519150601f19603f3d011682016040523d82523d6000602084013e61076d565b606091505b5091509150816107bf5760405162461bcd60e51b815260206004820152601a60248201527f4b796265725377617020657865637574696f6e206661696c65640000000000006044820152606401610248565b600080828060200190518101906107d69190610dbf565b6003546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084b9190610de3565b9050868111156108e2576003546001600160a01b031663a9059cbb336108718a85610e63565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e09190610dfc565b505b50505050505050506108f46001600055565b505050565b60006109237fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b90506001600160a01b038116610962576001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355610977565b336001600160a01b0382161461097757600080fd5b600180546001600160a01b038681166001600160a01b0319928316179092556003805486841690831681179091556002805493861693909216831790915560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af11580156109fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1f9190610dfc565b5060025460405163095ea7b360e01b81526001600160a01b039091166004820181905260001960248301529063095ea7b3906044016020604051808303816000875af1158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190610dfc565b5050505050565b333214610afe5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c7920454f412063616e207570646174652074686520616c6c6f7765642060448201526718dbdb9d1c9858dd60c21b6064820152608401610248565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600260005403610b725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610248565b6002600055565b6000600482511015610bc35760405162461bcd60e51b8152602060048201526013602482015272092dcecc2d8d2c840c8c2e8c240d8cadccee8d606b1b6044820152606401610248565b506020015190565b60008083601f840112610bdd57600080fd5b50813567ffffffffffffffff811115610bf557600080fd5b602083019150836020828501011115610c0d57600080fd5b9250929050565b60008060208385031215610c2757600080fd5b823567ffffffffffffffff811115610c3e57600080fd5b610c4a85828601610bcb565b90969095509350505050565b80356001600160a01b0381168114610c6d57600080fd5b919050565b60008060008060608587031215610c8857600080fd5b843567ffffffffffffffff80821115610ca057600080fd5b818701915087601f830112610cb457600080fd5b813581811115610cc357600080fd5b8860208260051b8501011115610cd857600080fd5b602092830196509450610cee9187019050610c56565b9396929550929360400135925050565b600080600060408486031215610d1357600080fd5b833567ffffffffffffffff811115610d2a57600080fd5b610d3686828701610bcb565b909790965060209590950135949350505050565b600080600060608486031215610d5f57600080fd5b610d6884610c56565b9250610d7660208501610c56565b9150610d8460408501610c56565b90509250925092565b600060208284031215610d9f57600080fd5b610da882610c56565b9392505050565b8183823760009101908152919050565b60008060408385031215610dd257600080fd5b505080516020909101519092909150565b600060208284031215610df557600080fd5b5051919050565b600060208284031215610e0e57600080fd5b81518015158114610da857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610e5c57610e5c610e34565b5060010190565b81810381811115610e7657610e76610e34565b9291505056fea2646970667358221220708d7539cd54eff71d6bbb55b9fd2f450f9ab7991cd58d57c0fc2ea8aeba1b9f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 657,
        "contract": "contracts/SafeRouter.sol:SafeRouter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7370,
        "contract": "contracts/SafeRouter.sol:SafeRouter",
        "label": "kyberSwapRouterContract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7373,
        "contract": "contracts/SafeRouter.sol:SafeRouter",
        "label": "safeTokenContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISafeToken)9227"
      },
      {
        "astId": 7382,
        "contract": "contracts/SafeRouter.sol:SafeRouter",
        "label": "usd",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)3238"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3238": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISafeToken)9227": {
        "encoding": "inplace",
        "label": "contract ISafeToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}